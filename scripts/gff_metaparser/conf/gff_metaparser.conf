# IDs can be substituted, but can be  ommited only for leaves
# parents can't be ommited from GFF, paresnt, phase and strand  will be preserved in GFF

# predefined _SEQID _SRC _TYPE _START _END _STRAND _PHASE _QUALS _PARENTID _FULLTAG _LEAFTAG 

# JSON can have only one '@' in the path string, to treat the following tag as list
# JSON can have additional json, which will be inserted into the object json
# JSON can have (in the order of interpolation)
#   value in JSON can be one of the predefined ones _SEQID, etc...
#   "_SUB" : "REGEXP;REPLACEMENT"
#   "_MAP" : {"from":"to",... }, only those that can be mapped will be preserved 
#   "_IGNORE": (array | string) JSON with regexps to ignore
#   "_SPLIT" : "DELIM;TAG1;TAG2;..."
#   check and overwrite by values from {json}
# JSON will add only if the previous value is emty
# JSON_SUB will substitute with the current, if the current value is not emty
# rules:
# (feature|@alias)/qualifier	JSON_RULE	objecttype(:_CTX_ID|_PARENT)?/deeper/into/the/json	{"json":"appended to 'the', -2 level"}


# type aliases
@GENE	ALIAS	gene,ncrna_gene,pseudogene
@MRNA	ALIAS	mrna,transcript,pseudogenic_transcript,guide_rna,lnc_rna
@MRNA	ALIAS	rnase_mrp_rna,rnase_p_rna,srp_rna,ncrna,rrna,snrna,snorna,trna,pre_mirna,mirna

@DESCR	ALIAS	description,fullname,product
@BIOTYPE	ALIAS	gene_biotype,biotype
@UTR	ALIAS	five_prime_UTR,three_prime_UTR

# case insesitive (all to lower)
#@GENE
@GENE/id	GFF
@GENE/@BIOTYPE	GFF
@GENE/id	JSON	gene/id	{"object_type":"gene"}
@GENE/@DESCR	JSON	gene/description	{"_IGNORE":"hypothetical protein"}
@GENE/dbxref	JSON	gene/xrefs	{"_SPLIT":":;dbname;id"}

#@MRNA
@MRNA/id GFF
@MRNA/parent	GFF	# obsolete
@MRNA/id	JSON	mrna/id	{"object_type":"transcript"}
@MRNA/product	JSON	gene:_PARENT/description	{"_IGNORE":"hypothetical protein"}
@MRNA/dbxref	JSON	mrna/xrefs	{"_SPLIT":":;dbname;id"}
@MRNA/stop_codon_redefined_as_selenocysteine	JSON	mrna/force_stop_to_sec	{"force_stop_to_sec":true}

# no @UTR/id
@UTR/parent	GFF	# obsolete

# no exon/id
exon/parent	GFF	# obsolete

# no cds/id	GFF
# cds/parent	GFF	# we'll be preserved automatically
cds/protein_id	GFF_SUB	cds/id	# overwrite
cds/id	JSON	cds/id	{"object_type":"translation"}
cds/protein_id	JSON_SUB	cds/id	# overwrite
cds/dbxref	JSON	cds/xrefs	{"_SPLIT":":;dbname;id"}

# cds/dbxref	JSON	gene:_PARENT/xrefs	{"_SPLIT":":;dbname;id", "_MAP": {"NCBI_GP":"GenBank"} } # for tcal patch, mapping should be done with the --xref_map option


# SEQ_REGIONS
#   filter them into a separate file

# IDS
@SEQR4ID	ALIAS	chromosome_band,centromere,region,scaffold

@SEQR4ID	JSON	seq_region:_SEQID	{"object_type":"seq_region", "name":"_SEQID"}	# even for plain features, without qualifiers 
#special case for codon_table
cds/transl_table	JSON	seq_region:_SEQID/codon_table	{"object_type":"seq_region", "name":"_SEQID"}

# aliases
region/name	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
region/alias	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
scaffold/alias	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
region/chromosome	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}

# is_circular
region/is_circular	JSON	seq_region:_SEQID/circular	{"circular":true}

# location
region/genome	JSON	seq_region:_SEQID/location	{"_MAP": {"chromosome":"nuclear_chromosome", "genomic":"nuclear_chromosome", "mitochondrion":"mitochondrial_chromosome"}}

# karyotype bands
chromosome_band/name	JSON	seq_region:_SEQID/@karyotype_bands/name	{"_SUB":"^band-?;"}
chromosome_band/_START	JSON	seq_region:_SEQID/@karyotype_bands/start
chromosome_band/_END	JSON	seq_region:_SEQID/@karyotype_bands/end

centromere/id	JSON	seq_region:_SEQID/@karyotype_bands/name	{"stain":"ACEN", "structure":"centromere"}
centromere/_START	JSON	seq_region:_SEQID/@karyotype_bands/start
centromere/_END	JSON	seq_region:_SEQID/@karyotype_bands/end

telomere/id	JSON	seq_region:_SEQID/@karyotype_bands/name	{"stain":"TEL", "structure":"telomere"}
telomere/_START	JSON	seq_region:_SEQID/@karyotype_bands/start
telomere/_END	JSON	seq_region:_SEQID/@karyotype_bands/end






